import {
  useCallback,
  useEffect,
  useRef,
  useState,
} from 'react';
import { createRoot } from 'react-dom/client';
import { chainSpec } from 'polkadot-api/chains/westend2';
import { westend } from '@polkadot-api/descriptors';
import { getSmProvider } from 'polkadot-api/sm-provider';
import { createClient, type PolkadotClient } from "polkadot-api";
import { start } from 'polkadot-api/smoldot';

interface AppProps {
  api: TypedApi<westend>;
  client: PolkadotClient;
}

const App = (props: AppProps) => {
  const { client, api } = props;

  const handleFetchMetadata = useCallback(async () => {
      Promise.all([
        // GET SUPPORTED METADATA VERSION
        api.apis.Metadata.metadata_versions(),
        // GET RUNTIME METADATA
        api.apis.Metadata.metadata()
      ])
      .then((result) => {
        console.log("supported versions" , result[0])

        const metadataAsHex = result[1]?.asHex();
        // THE METADATA HEX IS TOO LONG TO BE DISPLAYED
        console.log("runtime metadata" , `${metadataAsHex?.slice(0,16)}...${metadataAsHex?.slice(-16)}`)
      })
      .catch((err) => {
        console.log("Unexpected error!", err.message);
        console.log("Please try again.");
      })
  }, []);

  const handleFetchRuntime = useCallback(async () => {
    try {
      const runtime = await api.query.System.LastRuntimeUpgrade.getValue({ at: "finalized" })
      console.log("runtime" , runtime)
    } catch(err) {
      console.log("Unexpected error!", err.message);
      console.log("Please try again.");
    }
  }, []);

  const handleFetchChainSpecs = useCallback(async () => {
    try {
      const chainSpecs = await client.getChainSpecData();
      console.log("chainspecs" , chainSpecs);
    } catch(err) {
      console.log("Unexpected error!", err.message);
      console.log("Please try again.");
    }
  }, []);

  const handleFetchBabeConfig = useCallback(async () => {
      api.apis.BabeApi.configuration()
      .then((result) => {
        console.log("babe config" , result)
        console.log("expected block time in ms" , result?.slot_duration)
      })
      .catch((err) => {
        console.log("Unexpected error!", err.message);
        console.log("Please try again.");
      })
  }, []);

  return (
    <div className="bg-blue-100 size-full flex flex-col items-center justify-center gap-2">
      <button onClick={handleFetchMetadata}>
        Fetch metadata
      </button>
      <button onClick={handleFetchRuntime}>
        Fetch runtime
      </button>
      <button onClick={handleFetchChainSpecs}>
        Fetch chain specs
      </button>
      <button onClick={handleFetchBabeConfig}>
        Fetch expected block time
      </button>
    </div>
  );
};

(async () => {
  // START SMOLDOT AND CREATE A CHAIN CLIENT
  const smoldot = start();
  const chain = await smoldot.addChain({ chainSpec });
  const provider = getSmProvider(chain);
  const client = createClient(provider);
  const api = client.getTypedApi(westend);

  createRoot(document.getElementById('root')!).render(
    <App
      client={client}
      api={api}
    />
  );
})();

import { sr25519CreateDerive } from '@polkadot-labs/hdkd';
import {
  DEV_PHRASE,
  entropyToMiniSecret,
  mnemonicToEntropy,
} from '@polkadot-labs/hdkd-helpers';
import { chainSpec } from 'polkadot-api/chains/westend2';
import { getSmProvider } from 'polkadot-api/sm-provider';
import { start } from 'polkadot-api/smoldot';
import { getPolkadotSigner, type PolkadotSigner } from 'polkadot-api/signer';
import { createClient, type PolkadotClient, type TypedApi} from "polkadot-api";
import { MultiAddress, westend } from '@polkadot-api/descriptors';
import { useRef, useState, useCallback } from 'react';
import { createRoot } from 'react-dom/client';

interface AppProps {
  api: TypedApi<westend>;
  client: PolkadotClient;
  signer: PolkadotSigner;
}

const App = (props: AppProps) => {
  const { api, client, signer } = props;
  const refInput = useRef('');
  const [txStatus, setTxStatus] = useState({
    text: '',
    link: '',
  });
  const [txLoading, setTxLoading] = useState(false);

  const handleOnClick = useCallback(() => {
    setTxLoading(true);

    api.tx.Balances.transfer_allow_death({
      dest: MultiAddress.Id(refInput.current),
      value: 100n,
    })
    .signSubmitAndWatch(signer)
    .subscribe({
      // HANDLE TX DATA
      next({ txHash, type }) {
        setTxStatus({
          text: `Tx Stasus: ${type} / Tx Hash: ${txHash.slice(0, 4)}...${txHash.slice(-4)}`,
          link: `https://westend.subscan.io/extrinsic/${txHash}`,
        });

        console.log('tx type:' , type)
        console.log('tx hash:' , txHash)
      },
      // CLEAN UP AFTER COMPLETION
      complete() {
        // (OPTIONAL) DESTROY CLIENT ON COMPLETION
        // console.log('Shutting down smoldot...');
        // client.destroy();

        console.log('Tx was completed successfully!');
        setTxLoading(false);
      },
      // HANDLE TX ERROR
      error(err) {
        setTxLoading(false);

        console.log("Unexpected error", err.message);
      }
    })
  }, []);

  return (
    <div className="flex size-full flex-col items-center justify-center gap-4 bg-blue-100 p-4">
      <label htmlFor="address" className="flex w-full flex-col gap-2">
        Receiver of 100n WND
        <input
          id="address"
          placeholder={"Receiver Address"}
          onChange={(event) => {
            refInput.current = event.currentTarget.value;
          }}
        />
      </label>
      <button
        disabled={txLoading}
        onClick={handleOnClick}
        className="disabled:cursor-not-allowed disabled:opacity-50"
      >
        Send Transaction
      </button>
      {
        txStatus.text && txStatus.link
        && (
          <a
            target="_blank"
            href={txStatus.link}
          >
            {txStatus.text}
          </a>
        )
      }
    </div>
  );
};

(async () => {
  // START SMOLDOT AND CREATE A CHAIN CLIENT
  const smoldot = start();
  const chain = await smoldot.addChain({ chainSpec });
  const provider = getSmProvider(chain);
  const client = createClient(provider);
  const api = client.getTypedApi(westend);

  // USE A TEST ACCOUNT AS A SIGNER
  const entropy = mnemonicToEntropy(DEV_PHRASE);
  const miniSecret = entropyToMiniSecret(entropy);
  const hdkdKeyPair = sr25519CreateDerive(miniSecret)('//Bob');
  const signer = getPolkadotSigner(hdkdKeyPair.publicKey, 'Sr25519', (input) =>
    hdkdKeyPair.sign(input),
  );

  createRoot(document.getElementById('root')!).render(
    <App
      api={api}
      client={client}
      signer={signer}
    />
  );
})();
